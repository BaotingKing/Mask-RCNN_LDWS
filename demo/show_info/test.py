#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @author: ZK
# Time: 2019/07/24 11:57
import os
import time
import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt
import matplotlib
from matplotlib.patches import Polygon
from matplotlib.collections import PatchCollection


def main(_):
    if not os.path.exists('G:\\Dataset\\BDD100k'):
        raise ValueError('`images_dir` is not exist.')
    if not os.path.exists('G:\\Dataset\\BDD100k'):
        raise ValueError('`annotations_json_dir` is not exist.')
    if not os.path.exists('G:\\Dataset\\BDD100k'):
        raise ValueError('`label_map_path` is not exist.')


if __name__ == '__main__':
    fig, ax = plt.subplots()
    polygons = []
    num_sides = 100
    gemfield_polygons = [[88.46,
                          257.61,
                          89.1,
                          260.78,
                          84.34,
                          266.18,
                          82.43,
                          271.89,
                          81.8,
                          276.02,
                          81.16,
                          279.82,
                          80.85,
                          286.49,
                          84.02,
                          289.03,
                          84.97,
                          293.47,
                          85.92,
                          302.67,
                          85.61,
                          307.43,
                          83.39,
                          317.59,
                          79.58,
                          322.03,
                          87.19,
                          322.03,
                          89.73,
                          322.35,
                          90.05,
                          322.03,
                          91,
                          319.81,
                          91,
                          317.59,
                          92.27,
                          292.58,
                          93.54,
                          290.36,
                          94.81,
                          291,
                          94.81,
                          292.26,
                          94.49,
                          297.66,
                          94.81,
                          300.83,
                          96.71,
                          307.81,
                          97.35,
                          316.06,
                          97.03,
                          319.56,
                          97.98,
                          324.95,
                          99.89,
                          324.95,
                          101.79,
                          321.78,
                          102.11,
                          318.6,
                          102.11,
                          316.06,
                          102.11,
                          309.08,
                          102.11,
                          282.11,
                          103.69,
                          268.78,
                          102.43,
                          264.66,
                          98.62,
                          262.75,
                          97.35,
                          260.53,
                          95.76,
                          256.41,
                          91.32,
                          252.92]]
    print('----------------: ', len(gemfield_polygons[0]))
    gemfield_polygon = gemfield_polygons[0]
    max_value = max(gemfield_polygon) * 1.3
    gemfield_polygon = [i * 1.0 / max_value for i in gemfield_polygon]
    poly = np.array(gemfield_polygon).reshape((int(len(gemfield_polygon) / 2), 2))
    polygons.append(Polygon(poly, True))
    p = PatchCollection(polygons, cmap=matplotlib.cm.jet, alpha=0.4)
    colors = 100 * np.random.rand(1)
    p.set_array(np.array(colors))

    ax.add_collection(p)
    plt.show()
    # rle = [66916,
    #        6,
    #        587,
    #        8,
    #        585,
    #        10,
    #        552,
    #        7,
    #        22,
    #        14,
    #        550,
    #        9,
    #        20,
    #        15,
    #        549,
    #        11,
    #        15,
    #        19,
    #        548,
    #        13,
    #        13,
    #        20,
    #        548,
    #        13,
    #        8,
    #        25,
    #        545,
    #        16,
    #        4,
    #        29,
    #        544,
    #        50,
    #        543,
    #        50,
    #        542,
    #        51,
    #        540,
    #        51,
    #        542,
    #        51,
    #        542,
    #        51,
    #        542,
    #        52,
    #        542,
    #        52,
    #        542,
    #        52,
    #        542,
    #        52,
    #        542,
    #        52,
    #        542,
    #        51,
    #        542,
    #        51,
    #        543,
    #        49,
    #        545,
    #        49,
    #        545,
    #        49,
    #        545,
    #        49,
    #        544,
    #        50,
    #        542,
    #        52,
    #        541,
    #        52,
    #        541,
    #        52,
    #        541,
    #        36,
    #        2,
    #        13,
    #        543,
    #        34,
    #        5,
    #        12,
    #        543,
    #        35,
    #        4,
    #        12,
    #        543,
    #        36,
    #        3,
    #        12,
    #        543,
    #        37,
    #        2,
    #        12,
    #        543,
    #        37,
    #        2,
    #        12,
    #        543,
    #        37,
    #        3,
    #        10,
    #        545,
    #        36,
    #        4,
    #        8,
    #        547,
    #        35,
    #        6,
    #        3,
    #        552,
    #        13,
    #        4,
    #        16,
    #        562,
    #        32,
    #        559,
    #        34,
    #        559,
    #        34,
    #        559,
    #        34,
    #        559,
    #        35,
    #        559,
    #        35,
    #        559,
    #        35,
    #        559,
    #        34,
    #        560,
    #        33,
    #        561,
    #        31,
    #        563,
    #        30,
    #        564,
    #        25,
    #        570,
    #        21,
    #        574,
    #        17,
    #        579,
    #        3,
    #        3,
    #        8,
    #        588,
    #        3,
    #        4152,
    #        6,
    #        587,
    #        8,
    #        3,
    #        7,
    #        575,
    #        20,
    #        573,
    #        22,
    #        572,
    #        23,
    #        571,
    #        23,
    #        571,
    #        23,
    #        571,
    #        31,
    #        563,
    #        41,
    #        553,
    #        47,
    #        548,
    #        47,
    #        548,
    #        44,
    #        550,
    #        42,
    #        551,
    #        42,
    #        551,
    #        41,
    #        553,
    #        39,
    #        555,
    #        37,
    #        557,
    #        35,
    #        559,
    #        17,
    #        2,
    #        15,
    #        560,
    #        15,
    #        11,
    #        6,
    #        561,
    #        15,
    #        579,
    #        15,
    #        579,
    #        15,
    #        579,
    #        15,
    #        579,
    #        15,
    #        579,
    #        15,
    #        579,
    #        15,
    #        580,
    #        13,
    #        582,
    #        11,
    #        585,
    #        6,
    #        31471,
    #        4,
    #        5,
    #        5,
    #        579,
    #        16,
    #        577,
    #        17,
    #        577,
    #        18,
    #        576,
    #        18,
    #        576,
    #        19,
    #        575,
    #        19,
    #        575,
    #        20,
    #        574,
    #        20,
    #        575,
    #        19,
    #        576,
    #        18,
    #        578,
    #        16,
    #        580,
    #        14,
    #        581,
    #        13,
    #        582,
    #        12,
    #        569,
    #        7,
    #        6,
    #        12,
    #        568,
    #        9,
    #        6,
    #        10,
    #        568,
    #        11,
    #        6,
    #        8,
    #        568,
    #        14,
    #        6,
    #        3,
    #        571,
    #        15,
    #        579,
    #        16,
    #        578,
    #        17,
    #        577,
    #        17,
    #        577,
    #        17,
    #        577,
    #        17,
    #        578,
    #        16,
    #        579,
    #        15,
    #        581,
    #        13,
    #        582,
    #        12,
    #        582,
    #        12,
    #        582,
    #        12,
    #        582,
    #        12,
    #        582,
    #        12,
    #        582,
    #        12,
    #        583,
    #        10,
    #        585,
    #        8,
    #        587,
    #        6,
    #        22566,
    #        1,
    #        592,
    #        5,
    #        588,
    #        9,
    #        585,
    #        23,
    #        571,
    #        24,
    #        570,
    #        24,
    #        570,
    #        21,
    #        573,
    #        20,
    #        574,
    #        21,
    #        574,
    #        26,
    #        569,
    #        25,
    #        571,
    #        24,
    #        572,
    #        22,
    #        574,
    #        21,
    #        575,
    #        19,
    #        575,
    #        20,
    #        574,
    #        20,
    #        574,
    #        20,
    #        575,
    #        20,
    #        575,
    #        19,
    #        576,
    #        19,
    #        575,
    #        19,
    #        575,
    #        19,
    #        574,
    #        17,
    #        574,
    #        19,
    #        574,
    #        20,
    #        573,
    #        21,
    #        572,
    #        22,
    #        572,
    #        21,
    #        573,
    #        21,
    #        573,
    #        20,
    #        574,
    #        17,
    #        577,
    #        15,
    #        583,
    #        8,
    #        590,
    #        3,
    #        26709,
    #        12,
    #        582,
    #        12,
    #        582,
    #        14,
    #        580,
    #        15,
    #        579,
    #        16,
    #        577,
    #        18,
    #        575,
    #        20,
    #        573,
    #        22,
    #        66,
    #        3,
    #        502,
    #        23,
    #        63,
    #        7,
    #        501,
    #        23,
    #        63,
    #        8,
    #        500,
    #        23,
    #        62,
    #        10,
    #        499,
    #        28,
    #        55,
    #        12,
    #        499,
    #        31,
    #        51,
    #        13,
    #        499,
    #        36,
    #        46,
    #        13,
    #        499,
    #        39,
    #        39,
    #        17,
    #        500,
    #        42,
    #        34,
    #        18,
    #        501,
    #        45,
    #        29,
    #        19,
    #        503,
    #        47,
    #        24,
    #        19,
    #        506,
    #        51,
    #        18,
    #        18,
    #        507,
    #        52,
    #        17,
    #        15,
    #        509,
    #        54,
    #        16,
    #        12,
    #        511,
    #        55,
    #        16,
    #        12,
    #        510,
    #        56,
    #        16,
    #        12,
    #        509,
    #        57,
    #        16,
    #        12,
    #        509,
    #        27,
    #        4,
    #        26,
    #        17,
    #        10,
    #        510,
    #        27,
    #        8,
    #        22,
    #        18,
    #        8,
    #        511,
    #        27,
    #        13,
    #        3,
    #        2,
    #        12,
    #        20,
    #        3,
    #        514,
    #        27,
    #        19,
    #        10,
    #        538,
    #        27,
    #        20,
    #        8,
    #        539,
    #        26,
    #        23,
    #        3,
    #        543,
    #        24,
    #        571,
    #        20,
    #        576,
    #        18,
    #        577,
    #        17,
    #        579,
    #        15,
    #        582,
    #        11,
    #        584,
    #        10,
    #        585,
    #        8,
    #        588,
    #        1,
    #        114303]
    # print(sum(rle))
    # assert sum(rle) == 594 * 640
    # M = np.zeros(594 * 640)
    # N = len(rle)
    # n = 0
    # val = 1
    # for pos in range(N):
    #     val = not val
    #     color = [0, 255]
    #     for c in range(rle[pos]):
    #         M[n] = color[val]
    #         n += 1
    #
    # GEMFIELD = M.reshape(([594, 640]), order='F')
    # plt.imshow(GEMFIELD)
    # plt.show()
